q
locators_hash.to_a.map{|a| a.join('=')}.join(', ')q
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10).to_s]}
CiteProc::CitationItem.labels.map(&:to_s)
CiteProc::CitationItem.labels.map(&:to_s).join(' ')
CiteProc::CitationItem.labels.map(&:to_s)
CiteProc::CitationItem.labels
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10).to_s]}
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10).to_s]}.to_h
locators_hash.to_a.map{|a| a.join('=')}.join(', ')
locators_hash.to_a.map{|a| a.join('= ')}.join(', ')
locators_hash.to_a.map{|a| a.join('= ')}
locators_hash.to_a
locators_hash
q
Helpers.slice(named_attributes || {}, *CiteProc::CitationItem.labels.map(&:to_s)).reject { |_, value| value.nil? || value.empty? }
Helpers.slice(named_attributes || {}, *CiteProc::CitationItem.labels.map(&:to_s))
Helpers.slice(named_attributes || {}, *CiteProc::CitationItem.labels.map(&:to_s)).reject! { |_, value| value.nil? || value.empty? }
Helpers.slice(named_attributes || {}, *CiteProc::CitationItem.labels.map(&:to_s))
Helpersslice(named_attributes || {}, *CiteProc::CitationItem.labels.map(&:to_s))
named_attributes
c
named_attributes
parsed_attributes
q
named_attributes
Helpers.slice(named_attributes || {}, *CiteProc::CitationItem.labels.map(&:to_s))
continue
subject.named_attributes
subject.locators
subject
q
"foo, #{locators_string}"
q
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10).to_s]}.to_h.map{|k,v|"#{k}=#{v}"}.join(', ')
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10).to_s]}.to_h.map{|k,v|"#{k}=#{v}"}
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10).to_s]}.to_h
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10).to_s]}.to_h.to_s
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10).to_s]}.to_h
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10).to_s]}
CiteProc::CitationItem.labels.map(&:to_s).map{|l| [l,rand(10)]}
CiteProc::CitationItem.labels.map(&:to_s)
q
subject.positional_attributes == ["baz", "qux"]
subject.positional_attributes == ["baz", "qux"].dup
subject.positional_attributes == ["baz", "qux"]
subject.positional_attributes
subject.positional_attributes == ['baz', 'quz']
subject.positional_attributes === ['baz', 'quz']
subject.positional_attributes == ['baz', 'quz']
subject.positional_attributes
c
filename
q
self
concat [3]
self
concat [3]
concat 2
load(filename)
q
qload(filename)
load(filename)
filename
c
q
[].append
db
db.load("spec/fixtures/database.bib") 
db.length
db
c
n
