c
new_sort_keys
YAML.safe_load(yaml)
q
YAML.safe_load(yaml)
YAML.safe_load("#{yaml}")
YAML.safe_load("[#{yaml}]")
YAML.safe_load("[#{yaml}]").flatten(1)
new_sort_keys
q
(formatter.engine.style > 'bibliography' > 'sort').children.last.attributes
(formatter.engine.style > 'bibliography' > 'sort').children.last
(formatter.engine.style > 'bibliography' > 'sort').children
(formatter.engine.style > 'bibliography' > 'sort').children.first.attributes
q
(formatter.engine.style > 'bibliography' > 'sort').children.first.attributes
(formatter.engine.style > 'bibliography' > 'sort').children.first
(formatter.engine.style > 'bibliography' > 'sort').children
formatter.engine.style > 'bibliography' > 'sort'
c
formatter.engine.style > 'bibliography' > 'sort'
formatter.engine.style > 'bibliography'
formatter.engine.style > 'bibliographer'
formatter.engine.style > 'bibliographer' > 'sort'
q
engine.style > 'bibliography' > 'sort'
engine.style > 'bibliography' > 'sort
sort
q
sk.add_children *sort_keys
sort_keys
n
q
n
sk
n
sk
n
q
sk
sk.delete_children sk.children
sk.delete_children
n
q
sk.each_child(&:unlink)
sk.children
sk.each_child(&:unlink)
sk.children
n
q
sk.children
sk.each_child(&:unlink)
n
q
n
sk
n
sort_keys
n
q
sort_keys
continue
sort_keys
q
YAML.safe_load("[[{foo: bar}, {macro: lol}]]").flatten
YAML.safe_load("[{foo: bar}, {macro: lol}]").flatten
YAML.safe_load "[{foo: bar}, {macro: lol}]".flatten
YAML.safe_load "[{foo: bar}, {macro: lol}]"
YAML.safe_load "[{foo: bar}, {macro: lol}]".inspect
YAML.safe_load "[{foo: bar}, {macro: lol}]"
YAML.safe_load "- {foo: bar}, {macro: lol}"
YAML.safe_load "[{foo: bar}, {macro: lol}]"
YAML.safe_load "{foo: bar}, {macro: lol}"
YAML.safe_load "[{foo: bar}, {macro: lol}]"
YAML.safe_load "[{foo: bar}]"
YAML.safe_load "[{foo:bar}]"
YAML.safe_load "[{}]"
YAML.safe_load "[]"
YAML.safe_load ""
sort_keys
q
YAML.safe_load yaml
yaml
continue
YAML.load header_attributes['bibliography-bibliography-sort']
header_attributes['bibliography-bibliography-sort']
header_attributes
user_options
q
OPTIONS_DEFAULTS.merge user_options
q
user_options
user_optiosn
n
q
OPTIOq
user_options
n
user_options
n
q
OPTIONS_DEFAULTS.merge user_options
n
q
OPTIONS_DEFAULTS.merge user_options
user_options
n
q
user
n
q
Helpers.slice(document_attributes, OPTIONS_DEFAULTS.keys.map{|k| "#{OPTIONS_PREFIX}#{k}"})
user
n
continue
Helpers.slice(document_attributes, *defaults.keys.map{|k| "bibliography-#{k}"}).map { |k, v| [k[13..-1], v] }
Helpers.slice(document_attributes, *defaults.keys.map{|k| "bibliography-#{k}"})
Helpers.slice(document_attributes, *defaults.keys.map{|k| "bibliography-#{k}"}).map { |k, v| [k[13,-1], v] }
Helpers.slice(document_attributes, *defaults.keys.map{|k| "bibliography-#{k}"}).map { |k, v| [k.sub(/^bibliography-/, ''), v] }.to_h
Helpers.slice(document_attributes, *defaults.keys.map{|k| "bibliography-#{k}"}).map { |k, v| [k.sub(/^bibliography-/, ''), v] }
Helpers.slice(document_attributes, defaults.keys.map{|k| "bibliography-#{k}"})
Helpers.slice(document_attributes, defaults.keys.map{|k| "bibliography-#{k}"}).map { |k, v| [k.sub(/^bibliography-/, ''), v] }
defaults.keys.map{|k| "bibliography-#{k}"}
defaults.keys.map(&:to_s)
defaults.keys
defaults
q
qy
defaults[:order]
defaults['order']
defaults
document_attributes
q
document.bibliographer.options
q
engine.style.send(:citation)
engine.style.citation
engine.style
continue
cites.find { |cite| cite.key == item.id }.locators.first
cites.find { |cite| cite.key == item.id }.locators
item
cite
q
l
item.id.to_s
item.id
item.key
item
q
CiteProc::CitationItem.labels
cite.named_attributes
c
q
formatter.data
formatter
c
q
item.to_citeproc
CiteProc::CitationItem.labels
item.class.labels
item.labels
item.label
item.labels
item.data.to_citeproc
item.data.to_s
item.data
q
cites
c
cites
c
cites
c
cites
c
cites
q
c
formatted_citation
n
formatter.engine.renderer.format
formatter.engine.renderer.format = CiteProc::Ruby::Formats::Text.new
formatter.engine.renderer.format = CiteProc::Ruby::Formats::Text
formatter.engine.renderer.format CiteProc::Ruby::Formats::Text
formatter.engine.renderer.format Citeproc::Ruby::Formats::Text
formatter.engine.renderer.format
formatter.engine.renderer
formatter.renderer
formatter.engine
formatter
q
y
q
Regexp.last_match[:xref_label].gsub(']', '\]')
Regexp.last_match[:xref_label]
Regexp.last_match
q
Regexp.last_match[1]
Regexp.last_match
xref_label[1]
xref_label
q
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, '\1'.tr('[', ''))
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, '\1'.gsub('[', ''))
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['\1'.gsub('[', '')].join)
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['\1'].join)
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1'].join)
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1', ']'].join)
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1'.gsub(']', 'X'), ']'].join)
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1'.gsub(']', '\\\\]'), ']'].join)
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1'.gsub(']', '\\\]'), ']'].join)
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1'.gsub(']', '\\]'), ']'].join)
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1'.gsub(']', '\]'), ']'].join)
formatted_citation
formatted_citation.gsub(/{{{(.*?)}}}/, "X")
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1'.gsub(']', '\]'), ']'].join)
formatted_citation
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1'.gsub(']', '\]'), ']'].join)
q
        "{empty}" + formatted_citation.gsub(/{{{(.*?)}}}/, ['[', '\1'.gsub(']', '\]'), ']'].join)
formatted_citation
